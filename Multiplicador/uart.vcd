$date
  Thu Aug 15 02:02:01 2024
$end
$version
  GHDL v0
$end
$timescale
  1 fs
$end
$scope module standard $end
$upscope $end
$scope module numeric_bit $end
$upscope $end
$scope module textio $end
$upscope $end
$scope module multiplicador_tb_arquivo $end
$var reg 1 ! clk_in $end
$var reg 1 " rst_in $end
$var reg 1 # start_in $end
$var reg 1 $ ready_out $end
$var reg 4 % va_in[3:0] $end
$var reg 4 & vb_in[3:0] $end
$var reg 8 ' result_out[7:0] $end
$scope module dut $end
$var reg 1 ( clock $end
$var reg 1 ) reset $end
$var reg 1 * start $end
$var reg 4 + va[3:0] $end
$var reg 4 , vb[3:0] $end
$var reg 8 - vresult[7:0] $end
$var reg 1 . ready $end
$var reg 1 / s_zrb $end
$var reg 1 0 s_rsta $end
$var reg 1 1 s_cea $end
$var reg 1 2 s_rstb $end
$var reg 1 3 s_ceb $end
$var reg 1 4 s_rstr $end
$var reg 1 5 s_cer $end
$var reg 1 6 s_dcb $end
$var reg 1 7 s_clock_n $end
$scope module mult_uc $end
$var reg 1 8 clock $end
$var reg 1 9 reset $end
$var reg 1 : start $end
$var reg 1 ; zrb $end
$var reg 1 < rsta $end
$var reg 1 = cea $end
$var reg 1 > rstb $end
$var reg 1 ? ceb $end
$var reg 1 @ rstr $end
$var reg 1 A cer $end
$var reg 1 B dcb $end
$var reg 1 C ready $end
$comment next_state is not handled $end
$comment current_state is not handled $end
$upscope $end
$scope module mult_fd $end
$var reg 1 D clock $end
$var reg 4 E va[3:0] $end
$var reg 4 F vb[3:0] $end
$var reg 1 G rsta $end
$var reg 1 H cea $end
$var reg 1 I rstb $end
$var reg 1 J ceb $end
$var reg 1 K rstr $end
$var reg 1 L cer $end
$var reg 1 M dcb $end
$var reg 1 N zrb $end
$var reg 8 O vresult[7:0] $end
$var reg 4 P s_ra[3:0] $end
$var reg 4 Q s_rb[3:0] $end
$var reg 4 R s_bmenos1[3:0] $end
$var reg 4 S s_muxb[3:0] $end
$var reg 8 T s_a8[7:0] $end
$var reg 8 U s_soma[7:0] $end
$var reg 8 V s_rr[7:0] $end
$scope module ra $end
$var reg 1 W clock $end
$var reg 1 X reset $end
$var reg 1 Y enable $end
$var reg 4 Z d[3:0] $end
$var reg 4 [ q[3:0] $end
$var reg 4 \ dado[3:0] $end
$upscope $end
$scope module rb $end
$var reg 1 ] clock $end
$var reg 1 ^ reset $end
$var reg 1 _ enable $end
$var reg 4 ` d[3:0] $end
$var reg 4 a q[3:0] $end
$var reg 4 b dado[3:0] $end
$upscope $end
$scope module rr $end
$var reg 1 c clock $end
$var reg 1 d reset $end
$var reg 1 e enable $end
$var reg 8 f d[7:0] $end
$var reg 8 g q[7:0] $end
$var reg 8 h dado[7:0] $end
$upscope $end
$scope module soma $end
$var reg 8 i a[7:0] $end
$var reg 8 j b[7:0] $end
$var reg 1 k cin $end
$var reg 8 l sum[7:0] $end
$var reg 1 m cout $end
$var reg 8 n x[7:0] $end
$var reg 8 o y[7:0] $end
$var reg 8 p s[7:0] $end
$var reg 1 q cin0 $end
$var reg 1 r cout0 $end
$var reg 1 s cout1 $end
$var reg 1 t cout2 $end
$var reg 1 u cout3 $end
$var reg 1 v cout4 $end
$var reg 1 w cout5 $end
$var reg 1 x cout6 $end
$var reg 1 y cout7 $end
$scope module adder0 $end
$var reg 1 z a $end
$var reg 1 { b $end
$var reg 1 | cin $end
$var reg 1 } sum $end
$var reg 1 !" cout $end
$upscope $end
$scope module adder1 $end
$var reg 1 "" a $end
$var reg 1 #" b $end
$var reg 1 $" cin $end
$var reg 1 %" sum $end
$var reg 1 &" cout $end
$upscope $end
$scope module adder2 $end
$var reg 1 '" a $end
$var reg 1 (" b $end
$var reg 1 )" cin $end
$var reg 1 *" sum $end
$var reg 1 +" cout $end
$upscope $end
$scope module adder3 $end
$var reg 1 ," a $end
$var reg 1 -" b $end
$var reg 1 ." cin $end
$var reg 1 /" sum $end
$var reg 1 0" cout $end
$upscope $end
$scope module adder4 $end
$var reg 1 1" a $end
$var reg 1 2" b $end
$var reg 1 3" cin $end
$var reg 1 4" sum $end
$var reg 1 5" cout $end
$upscope $end
$scope module adder5 $end
$var reg 1 6" a $end
$var reg 1 7" b $end
$var reg 1 8" cin $end
$var reg 1 9" sum $end
$var reg 1 :" cout $end
$upscope $end
$scope module adder6 $end
$var reg 1 ;" a $end
$var reg 1 <" b $end
$var reg 1 =" cin $end
$var reg 1 >" sum $end
$var reg 1 ?" cout $end
$upscope $end
$scope module adder7 $end
$var reg 1 @" a $end
$var reg 1 A" b $end
$var reg 1 B" cin $end
$var reg 1 C" sum $end
$var reg 1 D" cout $end
$upscope $end
$upscope $end
$scope module sub1 $end
$var reg 4 E" a[3:0] $end
$var reg 4 F" b[3:0] $end
$var reg 1 G" cin $end
$var reg 4 H" sum[3:0] $end
$var reg 1 I" cout $end
$var reg 4 J" x[3:0] $end
$var reg 4 K" y[3:0] $end
$var reg 4 L" s[3:0] $end
$var reg 1 M" cin0 $end
$var reg 1 N" cin1 $end
$var reg 1 O" cin2 $end
$var reg 1 P" cin3 $end
$var reg 1 Q" cout0 $end
$var reg 1 R" cout1 $end
$var reg 1 S" cout2 $end
$var reg 1 T" cout3 $end
$scope module adder0 $end
$var reg 1 U" a $end
$var reg 1 V" b $end
$var reg 1 W" cin $end
$var reg 1 X" sum $end
$var reg 1 Y" cout $end
$upscope $end
$scope module adder1 $end
$var reg 1 Z" a $end
$var reg 1 [" b $end
$var reg 1 \" cin $end
$var reg 1 ]" sum $end
$var reg 1 ^" cout $end
$upscope $end
$scope module adder2 $end
$var reg 1 _" a $end
$var reg 1 `" b $end
$var reg 1 a" cin $end
$var reg 1 b" sum $end
$var reg 1 c" cout $end
$upscope $end
$scope module adder3 $end
$var reg 1 d" a $end
$var reg 1 e" b $end
$var reg 1 f" cin $end
$var reg 1 g" sum $end
$var reg 1 h" cout $end
$upscope $end
$upscope $end
$scope module muxb $end
$var reg 1 i" sel $end
$var reg 4 j" a[3:0] $end
$var reg 4 k" b[3:0] $end
$var reg 4 l" y[3:0] $end
$upscope $end
$scope module zero $end
$var reg 4 m" a[3:0] $end
$var reg 1 n" zero $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
0!
1"
0#
0$
b0000 %
b0000 &
b00000000 '
0(
1)
0*
b0000 +
b0000 ,
b00000000 -
0.
1/
10
01
12
03
04
05
06
17
08
19
0:
1;
1<
0=
1>
0?
0@
0A
0B
0C
1D
b0000 E
b0000 F
1G
0H
1I
0J
0K
0L
0M
1N
b00000000 O
b0000 P
b0000 Q
b1111 R
b0000 S
b00000000 T
b00000000 U
b00000000 V
1W
1X
0Y
b0000 Z
b0000 [
b0000 \
1]
1^
0_
b0000 `
b0000 a
b0000 b
1c
0d
0e
b00000000 f
b00000000 g
b00000000 h
b00000000 i
b00000000 j
0k
b00000000 l
0m
b00000000 n
b00000000 o
b00000000 p
0q
0r
0s
0t
0u
0v
0w
0x
0y
0z
0{
0|
0}
0!"
0""
0#"
0$"
0%"
0&"
0'"
0("
0)"
0*"
0+"
0,"
0-"
0."
0/"
00"
01"
02"
03"
04"
05"
06"
07"
08"
09"
0:"
0;"
0<"
0="
0>"
0?"
0@"
0A"
0B"
0C"
0D"
b0000 E"
b1111 F"
0G"
b1111 H"
0I"
b0000 J"
b1111 K"
b1111 L"
0M"
0N"
0O"
0P"
0Q"
0R"
0S"
0T"
0U"
1V"
0W"
1X"
0Y"
0Z"
1["
0\"
1]"
0^"
0_"
1`"
0a"
1b"
0c"
0d"
1e"
0f"
1g"
0h"
0i"
b0000 j"
b1111 k"
b0000 l"
b0000 m"
1n"
#10000000
0"
b0001 %
b0010 &
0)
b0001 +
b0010 ,
09
b0001 E
b0010 F
b0010 S
b0001 Z
b0010 `
b0010 j"
b0010 l"
#20000000
b0011 %
b0100 &
b0011 +
b0100 ,
b0011 E
b0100 F
b0100 S
b0011 Z
b0100 `
b0100 j"
b0100 l"
#30000000
b0101 %
b0011 &
b0101 +
b0011 ,
b0101 E
b0011 F
b0011 S
b0101 Z
b0011 `
b0011 j"
b0011 l"
#40000000
b0110 %
b0010 &
b0110 +
b0010 ,
b0110 E
b0010 F
b0010 S
b0110 Z
b0010 `
b0010 j"
b0010 l"
#50000000
b0111 %
b0001 &
b0111 +
b0001 ,
b0111 E
b0001 F
b0001 S
b0111 Z
b0001 `
b0001 j"
b0001 l"
#60000000
b1000 %
b1000 +
b1000 E
b1000 Z
#70000000
b1001 %
b1001 &
b1001 +
b1001 ,
b1001 E
b1001 F
b1001 S
b1001 Z
b1001 `
b1001 j"
b1001 l"
#80000000
b1111 %
b1111 &
b1111 +
b1111 ,
b1111 E
b1111 F
b1111 S
b1111 Z
b1111 `
b1111 j"
b1111 l"
#90000000
